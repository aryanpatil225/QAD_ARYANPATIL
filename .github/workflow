# ============================================================
# CI - Security Pipeline
# Purpose: Continuous Security Testing Pipeline (DevSecOps QA)
# Runs on PRs and pushes to main.
# ============================================================
name: CI - Security Pipeline
on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main]

# ------------------------------------------------------------
# Permissions: allow upload of SARIF results into GitHub
# ------------------------------------------------------------
permissions:
  contents: read
  security-events: write   # required to upload SARIF/results

# ------------------------------------------------------------
# Concurrency: cancel duplicate runs on same branch/PR
# ------------------------------------------------------------
concurrency:
  group: ci-security-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ============================================================
  # Checkout job: ensures code is available for all subsequent jobs
  # ============================================================
  checkout:
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.checkout.outputs.sha }}
    steps:
      - name: Checkout code
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

  # ============================================================
  # SAST: Static Application Security Testing using Semgrep
  # Scans code for insecure patterns, outputs SARIF
  # ============================================================
  sast:
    needs: checkout
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install semgrep
        run: python -m pip install --upgrade pip && pip install semgrep
      - name: Run Semgrep (diff-aware on PR)
        id: semgrep
        run: |
          semgrep ci --sarif > semgrep.sarif || true
      - name: Upload SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
        continue-on-error: true

  # ============================================================
  # Secrets Scan: detect accidentally committed credentials
  # ============================================================
  secret-scan:
    needs: checkout
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Secret detection (detect-secrets)
        run: |
          pip install detect-secrets
          detect-secrets scan > secrets.baseline
          detect-secrets audit-secrets --baseline secrets.baseline || true

  # ============================================================
  # IaC Scan: Infrastructure-as-Code scanning with Checkov
  # Detects misconfigurations in Terraform, CloudFormation, etc.
  # ============================================================
  iac-scan:
    needs: checkout
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Checkov (IaC scan)
        run: |
          pip install checkov
          checkov -d . -o sarif > checkov.sarif || true
      - name: Upload IaC SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov.sarif
        continue-on-error: true

  # ============================================================
  # Build & Image Scan: Build Docker image and scan with Trivy
  # Detects vulnerable dependencies & OS packages in containers
  # ============================================================
  build-and-image-scan:
    needs: [checkout, sast, iac-scan]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build docker image
        run: |
          docker build -t myapp:${{ github.sha }} .
      - name: Trivy image scan
        uses: aquasecurity/trivy-action@v0
        with:
          image-ref: myapp:${{ github.sha }}
          format: sarif
          output: trivy.sarif
      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy.sarif
        continue-on-error: true

  # ============================================================
  # Deploy Ephemeral App: start temporary environment for DAST
  # Using docker-compose to simulate runtime deployment
  # ============================================================
  deploy-ephemeral:
    needs: build-and-image-scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Start ephemeral review app (docker-compose)
        run: |
          docker-compose -f docker-compose.review.yml up -d
          sleep 8
      - name: Wait for service
        run: |
          ./scripts/wait-for-url.sh http://localhost:8080 60

  # ============================================================
  # DAST: Dynamic Application Security Testing with OWASP ZAP
  # Simulates real-world attacks on the ephemeral app
  # ============================================================
  dast:
    needs: deploy-ephemeral
    runs-on: ubuntu-latest
    steps:
      - name: OWASP ZAP baseline + active scan
        uses: zaproxy/action-full-scan@v1
        with:
          target: 'http://localhost:8080'
          cmd_options: -t 60
      - name: Save ZAP report
        run: |
          # assume ZAP action stores artifacts or produces report.json
          cp zap_report.json dast.json || true
      - name: Convert/Upload DAST (optional handle)
        run: echo "DAST done"

  # ============================================================
  # Aggregator: Merge all findings, prioritize, and report
  # Generates consolidated JSON + PR comment summary
  # ============================================================
  aggregator:
    needs: [sast, iac-scan, build-and-image-scan, dast]
    runs-on: ubuntu-latest
    steps:
      - name: Download SARIF artifacts
        run: echo "download / aggregate sarif files"
      - name: Run aggregator script
        run: |
          python ./scripts/aggregate_and_prioritize.py \
            --sarif-dir ./sarif \
            --out prioritized_report.json
      - name: Post PR comment with summary (GitHub CLI)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr comment ${{ github.event.pull_request.number }} --body "$(cat prioritized_report_summary.md)"

